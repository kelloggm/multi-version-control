/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

plugins {
  id 'application'
  id 'java'
  id 'com.github.johnrengelman.shadow' version '2.0.4'
}

// In this section you declare where to find the dependencies of your project
repositories {
  // Use jcenter for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  mavenCentral()
}

// Checker Framework pluggable type-checking
apply from: "gradle/checkerframework.gradle"

dependencies {
  // https://mvnrepository.com/artifact/org.tmatesoft.svnkit/svnkit
  implementation group: 'org.tmatesoft.svnkit', name: 'svnkit', version: '1.8.14'

  implementation group: 'org.ini4j', name: 'ini4j', version: '0.5.4'

  implementation 'org.apache.commons:commons-exec:1.3'
  implementation 'org.plumelib:options:1.0.0'
  implementation 'org.plumelib:plume-util:1.0.0'

  annotationProcessor 'org.checkerframework:checker:2.+'
  annotationProcessor 'org.checkerframework:jdk8:2.+'
}

// Define the main class for the application
mainClassName = 'org.plumelib.multiversioncontrol.MultiVersionControl'

checkerframework.addChecker('org.checkerframework.checker.nullness.NullnessChecker')
checkerframework.addChecker('org.checkerframework.checker.regex.RegexChecker')

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('private', '-quiet')
}

task javadocWeb(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/multiversioncontrol/api")
  classpath = project.sourceSets.main.compileClasspath
}

configurations {
  requireJavadoc
}
dependencies {
  implementation group: 'org.plumelib', name: 'require-javadoc', version: '0.1.0'
}
task requireJavadoc(type: Javadoc) {
  description = 'Ensures that Javadoc documentation exists.'
  destinationDir.deleteDir()
  source = sourceSets.main.allJava
  classpath = project.sourceSets.main.compileClasspath
  // options.memberLevel = JavadocMemberLevel.PRIVATE
  options.docletpath = project.sourceSets.main.compileClasspath as List
  options.doclet = "org.plumelib.javadoc.RequireJavadoc"
}

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort | xargs etags"
}
